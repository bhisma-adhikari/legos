class Robot {
	private UnregulatedMotor motorLeft;
	private UnregulatedMotor motorRight;
	private EV3UltrasonicSensor ultrasonicSensor;
	private EV3ColorSensor colorSensor;
	private EV3GyroSensor gyroSensor;

	private State state;
	private long startTimeOfCurrentStateMillis;

	private static Robot instance;

	/**
	 * Instantiates the Robot object. This is a SINGLETON object.
	 * 
	 * @param state Initial state of the robot.
	 */
	private Robot(State state) {
		this.motorLeft = new UnregulatedMotor(MotorPort.A);
		this.motorRight = new UnregulatedMotor(MotorPort.B);
		this.ultrasonicSensor = new EV3UltrasonicSensor(SensorPort.S1);
		this.colorSensor = new EV3ColorSensor(SensorPort.S2);
		this.gyroSensor = new EV3GyroSensor(SensorPort.S3);

		this.setPower(60);
		this.setState(state);

	}

	/**
	 * Instantiates and returns robot
	 * 
	 * @param state Initial state of robot
	 * @return Returns robot singleton. Instantiates robot if necessary.
	 */
	public static Robot getInstance(State state) {
		if (instance == null) {
			instance = new Robot(state);
		}
		instance.setState(state);
		return instance;
	}

	/**
	 * Sets robot motors to move robot forward
	 */
	public void goForward() {
		this.motorLeft.forward();
		this.motorRight.forward();
	}

	/**
	 * Sets robot motors to move backward.
	 */
	public void goBackward() {
		this.motorLeft.backward();
		this.motorRight.backward();
	}

	/**
	 * Accesses gyroscope to read the current angle of the robot
	 * 
	 * @return current angle
	 */
	public float getCurrentAngle() {
		this.gyroSensor.setCurrentMode("Angle");
		float[] sample = { 0 };
		this.gyroSensor.fetchSample(sample, 0);
		return sample[0];
	}

	/**
	 * Rotates robot counterclockwise if degree is positive. Rotates clockwise if degree is negative.
	 * 
	 * @param degree Amount to rotate robot
	 */
	public void rotateGivenDegrees(float degree) {
		float currentAngle = this.getCurrentAngle();

		if (degree == 0) {
			return;
		} else {
			float targetAngle = currentAngle + degree;
			if (degree > 0) {
				this.rotateCounterClockwise();
				// continue rotating until target angle is achieved
				while (this.getCurrentAngle() < targetAngle) {
				}
			} else {
				this.rotateClockwise();
				// continue rotating until target angle is achieved
				while (this.getCurrentAngle() > targetAngle) {
				}
			}
			this.stop(); // stop the robot after rotation
		}
	}

	/**
	 * Calls rotateGivenDegrees with the negative of degree
	 * 
	 * @param degree Amount to rotate robot
	 */
	public void rotateClockwiseGivenDegrees(float degree) {
		this.rotateGivenDegrees(-degree);
	}

	/**
	 * Calls rotateGivenDegrees with degree
	 * 
	 * @param degree Amount to rotate robot
	 */
	public void rotateCounterClockwiseGivenDegrees(float degree) {
		this.rotateGivenDegrees(degree);
	}

	/**
	 * Helper method for rotateGivenDegrees that rotates robot Clockwise
	 */
	public void rotateClockwise() {
		this.motorLeft.forward();
		this.motorRight.backward();
	}

	/**
	 * Helper method for rotateGivenDegrees that rotates robot Counterclockwise
	 */
	public void rotateCounterClockwise() {
		this.motorLeft.backward();
		this.motorRight.forward();
	}

	/**
	 * Stops robot motors from rotating
	 */
	public void stop() {
		this.motorLeft.stop();
		this.motorRight.stop();
	}

	/**
	 * Uses ultrasonic sensor to determine distance from closest object in front of robot
	 * 
	 * @return distance from object in meters
	 */
	public float getDistanceMetersFromObstacle() {
		// current mode must be set before enabling
		this.ultrasonicSensor.setCurrentMode("Distance");
		this.ultrasonicSensor.enable();

		float[] sample = { 0 };
		this.ultrasonicSensor.getDistanceMode().fetchSample(sample, 0);
		return sample[0];
	}
	
	/**
	 * Accesses the color sensor to read current color values.
	 * The following colors are remapped:
	 * 	green -> blue 
	 * 	orange -> yellow
	 * 
	 * @return closest color as an enumeration
	 */
	public Color getColor() {
		this.colorSensor.setCurrentMode("ColorID");
		int colorId = this.colorSensor.getColorID();

		if (colorId == 0) {
			return Color.RED; 
		} else if (colorId == 2) {
			return Color.BLUE;  // this is actually green 
		} else if (colorId == 3 || colorId == 6) {
			return Color.YELLOW;  // this is actually orange
		} else {
			return Color.UNKNOWN;
		}
	}



	// ACCESSORS
	
	/**
	 * @return Start time of current state in milliseconds
	 */
	public long getStartTimeOfCurrentStateMillis() {
		return this.startTimeOfCurrentStateMillis;
	}

	/**
	 * @return Current statemachine state
	 */
	public State getState() {
		return this.state;
	}

	/**
	 * This method sets the current state of the robot to the passed state, and also
	 * does any actions that need to be done upon entering that state
	 * 
	 * @param state to be set
	 */
	public void setState(State state) {
		this.state = state;
		this.startTimeOfCurrentStateMillis = System.currentTimeMillis();
		
		String stateName = state.toString().split("___")[0]; 
		System.out.println(stateName); 


		switch (stateName) {
		case "IDLE":
			this.stop();
			break;
		case "FORWARD":
			this.goForward();
			break;
		case "BACKWARD":
			this.goBackward();
			break;
		case "ROTATE_LEFT":
			this.rotateCounterClockwiseGivenDegrees(90);
			break;
		case "ROTATE_RIGHT":
			this.rotateClockwiseGivenDegrees(90);
			break;
		}
	}

	/**
	 * Sets the power of the robot motors
	 * 
	 * @param power percentage of power of motors
	 */
	private void setPower(int power) {
		this.motorLeft.setPower(power);
		this.motorRight.setPower(power);
	}

}

enum Color {
	RED, BLUE, YELLOW, UNKNOWN
}

// Dynamically generated state enumeration. Allows for duplicate states.